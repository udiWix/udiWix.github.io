import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    RenderTarget,
    ControlDescription,
} from "framer"

const TEXT_FIX_ID = "FramerTextFix"

function isPreview() {
    return RenderTarget.current() === RenderTarget.preview
}

function isThumbnail() {
    return RenderTarget.current() === RenderTarget.thumbnail
}

function cssNode() {
    return document.getElementById(TEXT_FIX_ID)
}

function injectCSSNode() {
    if (!cssNode() && isPreview()) {
        const style = document.createElement("style")
        style.id = TEXT_FIX_ID
        const css = `
            [data-framer-component-type=Text][style*=color] * {
                color: inherit;
                -webkit-text-fill-color: currentColor;
            };`
        style.appendChild(document.createTextNode(css))
        document.head.appendChild(style)
    }
}

function removeCSSNode() {
    if (cssNode() && isPreview()) {
        cssNode().remove()
    }
}

////////////////////////////////////////////////////////////////////////////////
// Component

export function TextColorTool(props) {
    ////////////////////////////////////////////////////////////////////////////////
    // Extract Props

    const { enabled, visible, ...rest } = props

    ////////////////////////////////////////////////////////////////////////////////
    // Handle Script

    if (enabled) injectCSSNode()
    if (!enabled) removeCSSNode()

    ////////////////////////////////////////////////////////////////////////////////
    // Sizes

    const size = {
        icon: 40,
        text: isThumbnail() ? 0 : 20,
        iconFont: isThumbnail() ? 180 : 32,
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Style: Frame Props

    const propsDefaultFrame = { background: "" }

    const propsInstruction = {
        background: isThumbnail() ? "#ddd" : "rgba(136, 85, 255, 0.1)",
        radius: isThumbnail() ? "50%" : "0%",
        border: isThumbnail() ? "" : "1px dashed",
        pointerEvents: "none",
        color: "rgb(136, 85, 255)",
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Style: CSS Props

    const styleWrapper = { WebkitBackdropFilter: "blur(30px)" }

    const styleIcon = {
        fontSize: size.iconFont,
        filter: `grayscale(${enabled ? "0%" : "100%"})`,
    }

    const styleText = { lineHeight: size.text }

    ////////////////////////////////////////////////////////////////////////////////
    // Render

    return (
        <Frame
            name={"TextColorTool"}
            size={"100%"}
            visible={visible}
            style={styleWrapper}
            {...propsInstruction}
        >
            <Frame
                name={"IconTextWrapper"}
                width={"100%"}
                height={size.icon + size.text}
                center
                {...propsDefaultFrame}
            >
                <Frame
                    name={"Icon"}
                    size={size.icon}
                    center={"x"}
                    style={styleIcon}
                    {...propsDefaultFrame}
                >
                    {"ðŸ§°"}
                </Frame>
                <Frame
                    name={"Text"}
                    width={"100%"}
                    height={size.text}
                    y={size.icon}
                    overflow={"hidden"}
                    style={styleText}
                    visible={!isThumbnail()}
                    {...propsDefaultFrame}
                >
                    Text Color Tool is {enabled ? "enabled" : "disabled"}.
                </Frame>
            </Frame>
        </Frame>
    )
}

const readme: ControlDescription = {
    type: ControlType.Enum,
    defaultValue: "a",
    options: ["a"],
    optionTitles: [
        "To use this component make sure you add it to the first Frame in your prototype and that it's enabled. This allows the script to be injected and enables you to add color overrides to all text layers. Once everything is setup you can hide the component with the visible toggle.",
    ],
}

////////////////////////////////////////////////////////////////////////////////
// React Default Props

TextColorTool.defaultProps = {
    height: 300,
    width: 300,
    enabled: true,
    visible: true,
    readme: [readme],
}

////////////////////////////////////////////////////////////////////////////////
// Framer Canvas Property Controls

addPropertyControls(TextColorTool, {
    enabled: {
        title: "Enabled",
        type: ControlType.Boolean,
        defaultValue: TextColorTool.defaultProps.enabled,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    visible: {
        title: "Visible",
        type: ControlType.Boolean,
        defaultValue: TextColorTool.defaultProps.visible,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    readme: {
        title: "Read Me",
        type: ControlType.Array,
        defaultValue: [readme],
        propertyControl: { ...readme },
        maxCount: 1,
    },
})
