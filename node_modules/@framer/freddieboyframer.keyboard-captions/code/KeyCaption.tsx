import * as React from "react"
import {
    Frame,
    Stack,
    addPropertyControls,
    ControlType,
    RenderTarget,
} from "framer"
import { useKey } from "./UseKey"
import { MacUSKeyboard } from "./Mac_us_keyboard"

export function KeyCaptions({
    isModifierUnicode,
    darkMode,
    onlyModifierKeys,
    durationOfFadeAway,
}) {
    const [keyString, setKeyString] = React.useState("")
    const [keysPressed, setKeysPressed] = React.useState(0)
    const [isHoldingKey, setIsHoldingKey] = React.useState(false)
    const [timer, setTimer] = React.useState(null)

    function addKeyString(char, isModifier) {
        clearTimeout(timer)

        let addKey = `${char}`
        if (keysPressed > 0) {
            addKey = `${keyString} ${char}`
        }
        setKeyString(addKey)
        setKeysPressed(keysPressed < 0 ? 0 + 1 : keysPressed + 1)
    }

    function onKeyUp() {
        setKeysPressed(keysPressed > 0 ? keysPressed - 1 : 0)
        if (keyString.length > 0) {
            setTimer(
                setTimeout(() => {
                    clearKeyString()
                    setKeyString("")

                    // setKeysPressed(0)
                }, durationOfFadeAway)
            )
        }
    }

    function clearKeyString() {
        setKeyString("")
    }

    // if (keyboard === "mac_us") {
    MacUSKeyboard.modifier.map((data, i) => {
        useKey(
            data.event,
            () =>
                addKeyString(
                    isModifierUnicode ? data.unicode : data.value,
                    true
                ),
            onKeyUp
        )
    })

    // if (!onlyModifierKeys) {
    MacUSKeyboard.number.map((num, i) => {
        useKey(num, () => addKeyString(num, false), onKeyUp)
    })

    MacUSKeyboard.special.map((speCar, i) => {
        useKey(speCar, () => addKeyString(speCar, false), onKeyUp)
    })

    MacUSKeyboard.alphabet.map((alpha, i) => {
        useKey(alpha, () => addKeyString(alpha.toUpperCase(), false), onKeyUp)
    })
    // }

    if (RenderTarget.current() === RenderTarget.canvas) {
        return (
            <Stack
                center
                width={350}
                background={
                    darkMode ? "rgba(0,0,0,.75" : "rgba(255,255,255,.75)"
                }
                radius={30}
                height={50}
                style={{ fontSize: 42 }}
                distribution={"center"}
                alignment={"center"}
            >
                <p
                    style={{
                        fontSize: 26,
                        color: darkMode ? "white" : "black",
                    }}
                >
                    Play in Preview Mode
                </p>
            </Stack>
        )
    }

    return (
        <Stack
            overflow="hidden"
            center
            width={50}
            animate={{
                width: 50 + 20 * keyString.length,
                background: darkMode
                    ? "rgba(0,0,0,.75"
                    : "rgba(255,255,255,.75)",
                opacity: keyString.length > 0 ? 1 : 0,
                // : darkMode
                // ? "rgba(0,0,0,0"
                // : "rgba(255,255,255,0)",
            }}
            opacity={0}
            transition={{
                type: "spring",
                damping: 10,
                mass: 0.2,
            }}
            background={darkMode ? "rgba(0,0,0,0" : "rgba(255,255,255,0)"}
            radius={30}
            height={50}
            style={{ fontSize: 42 }}
            distribution={"center"}
            alignment={"center"}
        >
            <p style={{ fontSize: 26, color: darkMode ? "white" : "black" }}>
                {keyString}
            </p>
        </Stack>
    )
}

KeyCaptions.defaultProps = {
    isModifierUnicode: true,
    keyboard: "mac_us",
    height: 50,
    width: 350,
    onlyModifierKeys: false,
    durationOfFadeAway: 1000,
}

addPropertyControls(KeyCaptions, {
    isModifierUnicode: {
        type: ControlType.Boolean,
        title: "Unicode",
        defaultValue: true,
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    darkMode: {
        type: ControlType.Boolean,
        title: "Dark Mode",
        defaultValue: true,
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    onlyModifierKeys: {
        type: ControlType.Boolean,
        title: "Only Mondifier",
        defaultValue: false,
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    durationOfFadeAway: {
        type: ControlType.Number,
        title: "Duration",
        defaultValue: 1000,
        min: 0,
        max: 5000,
        step: 100,
        displayStepper: true,
    },
})
