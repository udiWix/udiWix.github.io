import * as React from "react"

export function useKey(
    targetKey: string,
    targetKeyDownFunction: (event: KeyboardEvent) => void,
    targetKeyUpFunction: (event: KeyboardEvent) => void,
    deps?: any[]
) {
    targetKeyDownFunction = React.useCallback(targetKeyDownFunction, deps)
    targetKeyUpFunction = React.useCallback(targetKeyUpFunction, deps)

    React.useEffect(() => {
        function pressDownKey(event) {
            if (event.key === targetKey && !event.repeat) {
                targetKeyDownFunction(event)
            }
        }

        function pressUpKey(event) {
            if (event.key === targetKey) {
                targetKeyUpFunction(event)
            }
        }

        document.addEventListener("keydown", pressDownKey)
        document.addEventListener("keyup", pressUpKey)

        return function removeListener() {
            document.removeEventListener("keydown", pressDownKey)
            document.removeEventListener("keyup", pressUpKey)
        }
    }, [targetKey, targetKeyDownFunction, targetKeyUpFunction])
}
